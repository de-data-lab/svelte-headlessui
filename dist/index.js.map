{"version":3,"sources":["../src/lib/internal/store.ts","../src/lib/internal/aria-attribute.ts","../src/lib/internal/aria-activedescendent.ts","../src/lib/internal/aria-controls.ts","../src/lib/internal/aria-disabled.ts","../src/lib/internal/keys.ts","../src/lib/internal/focus.ts","../src/lib/internal/aria-expanded.ts","../src/lib/internal/aria-label.ts","../src/lib/internal/aria-selected.ts","../src/lib/internal/behavior.ts","../src/lib/internal/events.ts","../src/lib/internal/key-handler.ts","../src/lib/internal/key-escape.ts","../src/lib/internal/key-tab.ts","../src/lib/internal/list.ts","../src/lib/internal/new-id.ts","../src/lib/internal/on-click.ts","../src/lib/internal/on-click-outside.ts","../src/lib/internal/on-input.ts","../src/lib/internal/on-keydown.ts","../src/lib/internal/on-pointer-move.ts","../src/lib/internal/noop.ts","../src/lib/internal/set-has-popup.ts","../src/lib/internal/set-role.ts","../src/lib/internal/set-tab-index.ts","../src/lib/internal/set-type.ts","../src/lib/internal/value.ts","../src/lib/combobox.ts","../src/lib/internal/utils.ts","../src/lib/internal/key-enter.ts","../src/lib/internal/key-home-end.ts","../src/lib/internal/key-left-right.ts","../src/lib/internal/key-up-down.ts","../src/lib/internal/key-navigation.ts","../src/lib/internal/key-backspace.ts","../src/lib/internal/on-change.ts","../src/lib/internal/aria-modal.ts","../src/lib/internal/cancellable-close.ts","../src/lib/dialog.ts","../src/lib/internal/key-space-enter.ts","../src/lib/disclosure.ts","../src/lib/internal/is-character.ts","../src/lib/internal/key-character.ts","../src/lib/listbox.ts","../src/lib/menu.ts","../src/lib/popover.ts","../src/lib/internal/aria-orientation.ts","../src/lib/tabs.ts","../src/lib/internal/aria-checked.ts","../src/lib/internal/aria-pressed.ts","../src/lib/switch.ts"],"sourcesContent":["import { derived, readable, writable } from 'svelte/store'\nimport type { Readable, Writable } from 'svelte/store'\n\n// this improves minification by avoiding multiple separate import statements\nexport { derived, readable, writable }\nexport type { Readable, Writable }\n\n// dedupe updates without changes\nexport function dedupe<T>(store: Readable<T>): Readable<T> {\n\tlet previous: T\n\n\treturn derived(store, ($value, set) => {\n\t\tif ($value !== previous) {\n\t\t\tprevious = $value\n\t\t\tset($value)\n\t\t}\n\t})\n}\n","export const setAriaAttributeString = (name: string) => (node: HTMLElement) => (id?: string) =>\n\tid ? node.setAttribute(name, id) : node.removeAttribute(name)\n\nexport const setAriaAttributeBoolean =\n\t(name: string) => (node: HTMLElement) => (value?: boolean) =>\n\t\tvalue === undefined ? node.removeAttribute(name) : node.setAttribute(name, value.toString())\n","import { derived, type Readable } from './store'\nimport { setAriaAttributeString } from './aria-attribute'\nimport type { Behavior } from './behavior'\nimport type { List } from './list'\n\nexport const setAriaActivedescendent = setAriaAttributeString('aria-activedescendant')\n\nexport const reflectAriaActivedescendent =\n\t(store: Readable<List>): Behavior =>\n\t(node) =>\n\t\tderived(store, ($store) => $store.items[$store.active]?.id ?? '').subscribe(\n\t\t\tsetAriaActivedescendent(node),\n\t\t)\n","import type { Behavior } from './behavior'\nimport { derived, type Readable } from './store'\nimport { setAriaAttributeString } from './aria-attribute'\n\nexport interface Controllable {\n\tcontrols?: string\n}\n\nexport const setAriaControls = setAriaAttributeString('aria-controls')\n\nexport const reflectAriaControls =\n\t(store: Readable<Controllable>): Behavior =>\n\t(node) =>\n\t\tderived(store, ($store) => $store.controls).subscribe(setAriaControls(node))\n","import { derived, type Readable } from './store'\nimport { setAriaAttributeBoolean } from './aria-attribute'\nimport type { Behavior } from './behavior'\nimport type { List } from './list'\n\nexport const setAriaDisabled = setAriaAttributeBoolean('aria-disabled')\n\nexport const reflectAriaDisabled =\n\t(store: Readable<List>): Behavior =>\n\t(node) =>\n\t\tderived(\n\t\t\tstore,\n\t\t\t($store) => $store.items.find((item) => item.id === node.id)?.disabled,\n\t\t).subscribe(setAriaDisabled(node))\n","// Ref: https://www.w3.org/TR/uievents-key/#named-key-attribute-values\nexport const Space = ' '\nexport const Enter = 'Enter'\nexport const Esc = 'Esc'\nexport const Escape = 'Escape'\nexport const Backspace = 'Backspace'\n\nexport const ArrowLeft = 'ArrowLeft'\nexport const ArrowUp = 'ArrowUp'\nexport const ArrowRight = 'ArrowRight'\nexport const ArrowDown = 'ArrowDown'\n\nexport const Home = 'Home'\nexport const End = 'End'\nexport const Up = 'Up'\nexport const Down = 'Down'\n\nexport const PageUp = 'PageUp'\nexport const PageDown = 'PageDown'\n\nexport const Tab = 'Tab'\n","import { derived, type Readable } from './store'\nimport { Tab } from './keys'\nimport type { Expandable } from './aria-expanded'\nimport type { Behavior } from './behavior'\n\nexport const setFocus = (node: HTMLElement) => (focus: boolean) => {\n\tif (focus) {\n\t\t// may need to wait for svelte to update UI before we can set focus\n\t\trequestAnimationFrame(() => {\n\t\t\tnode.focus({ preventScroll: true })\n\t\t})\n\t}\n}\n\n// Credit:\n//  - https://stackoverflow.com/a/30753870\nconst focusableSelector = [\n\t'[contentEditable=true]',\n\t'[tabindex]',\n\t'a[href]',\n\t'area[href]',\n\t'button:not([disabled])',\n\t'iframe',\n\t'input:not([disabled])',\n\t'select:not([disabled])',\n\t'textarea:not([disabled])',\n].join(',')\n\nfunction onKeyDown(event: KeyboardEvent) {\n\tif (event.key !== Tab) return\n\n\tconst container = event.currentTarget as HTMLElement\n\tconst element = event.target as HTMLElement\n\tif (!container.contains(element)) return\n\n\tconst focusable = [...container.querySelectorAll(focusableSelector)]\n\tconst first = focusable[0]\n\tconst last = focusable[focusable.length - 1]\n\n\t// shift + tab on first element should wrap back to last\n\tif (element === first && event.shiftKey) {\n\t\t;(last as HTMLElement).focus()\n\t\tevent.preventDefault()\n\t}\n\n\t// plain tab on last element should wrap back to first\n\tif (element === last && !event.shiftKey) {\n\t\t;(first as HTMLElement).focus()\n\t\tevent.preventDefault()\n\t}\n}\n\nconst selectableSelector = ['textarea', 'input'].join(',')\nfunction isSelectableElement(\n\telement: Element | null,\n): element is HTMLInputElement | HTMLTextAreaElement {\n\treturn element?.matches?.(selectableSelector) ?? false\n}\n\nexport const trapFocusOnOpen =\n\t(store: Readable<Expandable>): Behavior =>\n\t(node) =>\n\t\tderived(store, ($store) => $store.expanded).subscribe((expanded) => {\n\t\t\tif (expanded) {\n\t\t\t\tconst focusable = node.querySelector(focusableSelector) as HTMLElement | null\n\t\t\t\tif (focusable) {\n\t\t\t\t\trequestAnimationFrame(() => {\n\t\t\t\t\t\tfocusable.focus()\n\t\t\t\t\t\t// if input or textarea, select text as though we'd tabbed to it\n\t\t\t\t\t\tif (isSelectableElement(focusable)) {\n\t\t\t\t\t\t\tfocusable.select()\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tnode.addEventListener('keydown', onKeyDown)\n\t\t\t} else {\n\t\t\t\tnode.removeEventListener('keydown', onKeyDown)\n\t\t\t}\n\t\t})\n","import { derived, type Readable } from './store'\nimport { setAriaAttributeBoolean } from './aria-attribute'\nimport { setFocus } from './focus'\nimport type { Behavior } from './behavior'\n\nexport interface Expandable {\n\texpanded: boolean\n\topened: boolean // flag if it's ever been opened, to prevent initial focus being set when closed\n}\n\nexport const defaultExpanded: Expandable = {\n\texpanded: false,\n\topened: false,\n}\n\nexport const setAriaExpanded = setAriaAttributeBoolean('aria-expanded')\n\nexport const reflectAriaExpanded =\n\t(store: Readable<Expandable>): Behavior =>\n\t(node) =>\n\t\tderived(store, ($store) => $store.expanded).subscribe(setAriaExpanded(node))\n\nexport const focusOnExpanded =\n\t(store: Readable<Expandable>): Behavior =>\n\t(node) =>\n\t\tderived(store, ($store) => $store.expanded).subscribe(setFocus(node))\n\nexport const focusOnClose =\n\t(store: Readable<Expandable>): Behavior =>\n\t(node) =>\n\t\tderived(store, ($store) => $store.opened && !$store.expanded).subscribe(setFocus(node))\n","import type { Behavior } from './behavior'\nimport { derived, type Readable } from './store'\nimport { setAriaAttributeString } from './aria-attribute'\n\nexport interface Labelable {\n\tlabel?: string\n}\n\nexport const setAriaLabel = setAriaAttributeString('aria-label')\n\nexport const reflectAriaLabel =\n\t(store: Readable<Labelable>): Behavior =>\n\t(node) =>\n\t\tderived(store, ($store) => $store.label).subscribe(setAriaLabel(node))\n","import { derived, type Readable } from './store'\nimport { setAriaAttributeBoolean } from './aria-attribute'\nimport type { Behavior } from './behavior'\n\n// TODO: enforce that it has to extend list (?)\nexport interface Selectable {\n\tselected: any\n\tmulti: boolean\n}\n\nexport const defaultSelected: Selectable = {\n\tselected: null,\n\tmulti: false,\n}\n\nexport const setAriaSelected = setAriaAttributeBoolean('aria-selected')\nexport const setAriaMultiselectable = setAriaAttributeBoolean('aria-multiselectable')\n\nexport const reflectAriaSelected =\n\t(store: Readable<Selectable>, value: any): Behavior =>\n\t(node) =>\n\t\tderived(store, ($store) =>\n\t\t\t$store.multi ? $store.selected.includes(value) : $store.selected === value,\n\t\t).subscribe(setAriaSelected(node))\n\nexport const reflectAriaMultiselectable =\n\t(store: Readable<Selectable>): Behavior =>\n\t(node) =>\n\t\tderived(store, ($store) => $store.multi).subscribe(setAriaMultiselectable(node))\n","export type Unsubscribe = () => void\nexport type Behavior = (node: HTMLElement) => Unsubscribe\n\nexport function applyBehaviors(node: HTMLElement, behaviors: Behavior[]) {\n\tconst unsubscribes = behaviors.map((behavior) => behavior(node))\n\treturn () => unsubscribes.forEach((unsubscribe) => unsubscribe())\n}\n","// listener is a utility to define event listeners\nexport const listener = <K extends keyof HTMLElementEventMap>(\n\tnode: HTMLElement,\n\ttype: K,\n\thandler: (event: HTMLElementEventMap[K]) => void,\n\tcapture = false,\n) => {\n\tnode.addEventListener(type, handler, capture)\n\treturn () => node.removeEventListener(type, handler, capture)\n}\n\nexport const blockDefaultAction = (event: Event) => {\n\tif (event.isTrusted) {\n\t\tevent.preventDefault()\n\t\tevent.stopPropagation()\n\t\tevent.stopImmediatePropagation()\n\t}\n}\n","import type { Callable } from './callable'\nimport { blockDefaultAction } from './events'\n\nexport type KeyHandler = (event: KeyboardEvent) => void\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const allowDefaultKeyAction = (_event: KeyboardEvent) => {}\n\nexport const keyHandler =\n\t(matches: string[], action: KeyHandler = blockDefaultAction) =>\n\t(...fns: Callable[]): KeyHandler =>\n\t(event) => {\n\t\tif (matches.includes(event.key)) {\n\t\t\tfns.forEach((fn) => fn())\n\t\t\tif (action) {\n\t\t\t\taction(event)\n\t\t\t}\n\t\t}\n\t}\n","import { keyHandler } from './key-handler'\nimport { Escape } from './keys'\n\nexport const keyEscape = keyHandler([Escape])\n","import { allowDefaultKeyAction, keyHandler } from './key-handler'\nimport { Tab } from './keys'\n\nexport const keyTab = keyHandler([Tab])\n\nexport const keyTabAllow = keyHandler([Tab], allowDefaultKeyAction)\n","import { dedupe, derived, type Readable } from './store'\nimport type { Selectable } from './aria-selected'\nimport type { Behavior } from './behavior'\nimport type { Callable } from './callable'\n\nexport interface ItemOptions {\n\tvalue?: any\n\tdisabled?: boolean\n}\n\nexport interface ListItem {\n\tid: string\n\tnode: HTMLElement\n\ttext: string\n\tvalue: any\n\tdisabled: boolean\n}\n\nexport interface List {\n\titems: ListItem[]\n\tactive: number\n}\n\nexport const defaultList = () =>\n\t({\n\t\titems: [],\n\t\tactive: -1,\n\t}) as List\n\nexport function onDestroy(fn: (node: HTMLElement) => void): Behavior {\n\treturn (node) => () => fn(node)\n}\n\nexport const removeItem = (state: List, node: HTMLElement) => {\n\treturn {\n\t\titems: state.items.filter((item) => item.id !== node.id),\n\t}\n}\n\nexport const active = (state: List) =>\n\tstate.active === -1 || state.items.length === 0\n\t\t? undefined\n\t\t: state.active >= state.items.length\n\t\t\t? state.items[state.active]\n\t\t\t: state.items[state.active]?.value\n\nexport const activate =\n\t(selector: string, focus: (node: HTMLElement | null) => void, ...actions: Callable[]) =>\n\t(event: Event) => {\n\t\tconst el = (event.target as Element).closest(selector)\n\t\tfocus(el as HTMLElement)\n\t\tactions.forEach((action) => action())\n\t}\n\nexport const raiseChangeOnSelect =\n\t(store: Readable<Selectable>): Behavior =>\n\t(node) => {\n\t\treturn dedupe(derived(store, ($store) => $store.selected)).subscribe((selected) => {\n\t\t\tconst event = new CustomEvent('change', {\n\t\t\t\tdetail: {\n\t\t\t\t\tselected,\n\t\t\t\t},\n\t\t\t\tbubbles: true,\n\t\t\t})\n\t\t\tnode.dispatchEvent(event)\n\t\t})\n\t}\n\nexport function selectActive(state: List & Selectable) {\n\tif (state.active === -1 || state.items[state.active].disabled) return {}\n\t// set selected item, if in multi-select mode toggle selection\n\tconst value = active(state)\n\tconst selected = state.multi\n\t\t? state.selected.includes(value)\n\t\t\t? state.selected.filter((selected: any) => selected !== value)\n\t\t\t: [...state.selected, value]\n\t\t: value\n\treturn { selected }\n}\n\nexport function getItemValues(node: HTMLElement, options?: ItemOptions) {\n\tconst text = node.textContent?.trim() ?? ''\n\treturn {\n\t\ttext,\n\t\tvalue: options?.value || text,\n\t\tdisabled: options?.disabled ?? false,\n\t}\n}\n\n// return index of first non-disabled item\nexport const firstActive = (state: List) => state.items.findIndex((item) => !item.disabled)\n\n// return index of previous non-disabled item\nexport const previousActive = (state: List) => {\n\tlet x = state.active === -1 ? state.items.length : state.active\n\twhile (--x > -1) {\n\t\tif (!state.items[x].disabled) {\n\t\t\treturn x\n\t\t}\n\t}\n\treturn state.active\n}\n\nexport const previousActiveSelectable = (state: List & Selectable) => {\n\t// make last selected item active\n\tif (state.active === -1 && (!state.multi || state.selected.length > 0)) {\n\t\tconst index = state.items.findIndex(\n\t\t\t(x) => x.value === (state.multi ? state.selected[state.selected.length - 1] : state.selected),\n\t\t)\n\n\t\t// handles selected items being removed from available list (fallthrough to selecting last active item)\n\t\tif (index > -1) {\n\t\t\treturn index\n\t\t}\n\t}\n\n\treturn previousActive(state)\n}\n\n// return index of next non-disabled item\nexport const nextActive = (state: List) => {\n\tlet x = state.active\n\twhile (++x < state.items.length) {\n\t\tif (!state.items[x].disabled) {\n\t\t\treturn x\n\t\t}\n\t}\n\treturn state.active\n}\n\nexport const nextActiveSelectable = (state: List & Selectable) => {\n\t// make first selected item active\n\tif (state.active === -1 && (!state.multi || state.selected.length > 0)) {\n\t\tconst index = state.items.findIndex(\n\t\t\t(x) => x.value === (state.multi ? state.selected[0] : state.selected),\n\t\t)\n\n\t\t// handles selected items being removed from available list (fallthrough to selecting first active item\n\t\tif (index > -1) {\n\t\t\treturn index\n\t\t}\n\t}\n\n\treturn nextActive(state)\n}\n\n// return index of next non-disabled item\nexport const lastActive = (state: List) => findLastIndex(state.items, (item) => !item.disabled)\n\n/**\n * Returns the index of the last element in the array where predicate is true, and -1\n * otherwise.\n * @param array The source array to search in\n * @param predicate find calls predicate once for each element of the array, in descending\n * order, until it finds one where predicate returns true. If such an element is found,\n * findLastIndex immediately returns that element index. Otherwise, findLastIndex returns -1.\n */\nexport function findLastIndex<T>(\n\tarray: T[],\n\tpredicate: (value: T, index: number, obj: T[]) => boolean,\n): number {\n\tlet l = array.length\n\twhile (l--) {\n\t\tif (predicate(array[l], l, array)) return l\n\t}\n\treturn -1\n}\n\nexport const getUpdater =\n\t(node: HTMLElement, getState: () => List, setState: (part: Partial<List>) => void) =>\n\t(options?: ItemOptions) => {\n\t\tconst state = getState()\n\t\tconst values = getItemValues(node, options)\n\t\tconst item = state.items.find((item) => item.id === node.id)\n\t\tif (item) {\n\t\t\tif (\n\t\t\t\titem.text === values.text &&\n\t\t\t\titem.value === values.value &&\n\t\t\t\titem.disabled === values.disabled\n\t\t\t)\n\t\t\t\treturn\n\t\t\tObject.assign(item, values)\n\t\t} else {\n\t\t\tstate.items.push({ id: node.id, node, ...values })\n\t\t}\n\t\tsetState({ items: state.items })\n\t}\n\nexport const getFocuser =\n\t(getState: () => List, focus: (active: number) => void) => (node: HTMLElement | null) => {\n\t\tconst state = getState()\n\t\tfocus(node ? state.items.findIndex((item) => item.id === node.id && !item.disabled) : -1)\n\t}\n\nexport const getSearch =\n\t(getState: () => List, focus: (active: number) => void, prefixOnly: boolean = false) =>\n\t(query: string) => {\n\t\tconst state = getState()\n\t\tconst searchable =\n\t\t\tstate.active === -1\n\t\t\t\t? state.items\n\t\t\t\t: state.items.slice(state.active + 1).concat(state.items.slice(0, state.active + 1))\n\n\t\tconst re = new RegExp(`${prefixOnly ? '^' : ''}${query}`, 'i')\n\t\tconst found = searchable.findIndex((x) => x.text.match(re) && !x.disabled)\n\n\t\tif (found > -1) {\n\t\t\tconst index = (found + state.active + 1) % state.items.length\n\t\t\tfocus(index)\n\t\t}\n\t}\n","let id = 0\n\nexport function newID() {\n\treturn ++id\n}\n\nexport function ensureID(node: HTMLElement, prefix: string) {\n\tnode.id = `${prefix}:${newID()}`\n}\n","import { listener } from './events'\n\nexport const onClick = (fn: (event: Event) => void) => (node: HTMLElement) =>\n\tlistener(node, 'click', fn)\n","import type { Behavior } from './behavior'\nimport { listener } from './events'\n\nexport function onClickOutside(\n\tgetContainers: () => (HTMLElement | undefined)[] | null,\n\tfn: (event: Event) => void,\n): Behavior {\n\treturn () => {\n\t\tlet initial: Node | null = null\n\n\t\tfunction handler(event: Event) {\n\t\t\t// ignore space as click\n\t\t\tif ((event as PointerEvent).pointerType === '') return\n\n\t\t\t// ignore non-primary clicks\n\t\t\tif (!initial) return\n\n\t\t\t// get container nodes that we care about being outside of (null if not enabled)\n\t\t\tconst containers = getContainers()\n\n\t\t\t// if there are some, and we're not inside any of them, make the call\n\t\t\tif (containers && !containers.some((node) => (node ? node.contains(initial) : false))) {\n\t\t\t\tfn(event)\n\t\t\t}\n\n\t\t\t// clear for next time\n\t\t\tinitial = null\n\t\t}\n\n\t\tfunction setInitial(event: PointerEvent) {\n\t\t\tif (event.isPrimary) {\n\t\t\t\tinitial = event.target as Node\n\t\t\t}\n\t\t}\n\n\t\tconst listeners = [\n\t\t\tlistener(document.documentElement, 'pointerdown', setInitial, true),\n\t\t\tlistener(document.documentElement, 'click', handler, true),\n\t\t]\n\n\t\treturn () => listeners.forEach((listener) => listener())\n\t}\n}\n","import { listener } from './events'\n\ntype FilterFn = (value: string) => void\n\n// TODO: ensure node is type HTMLInputElement when applied\nexport const onInput = (fn: FilterFn) => (node: HTMLElement) =>\n\tlistener(node, 'input', (event) => {\n\t\tconst el = event.target as HTMLInputElement\n\t\tfn(el.value)\n\t})\n","import type { Behavior } from './behavior'\nimport type { KeyHandler } from './key-handler'\n\nexport function onKeydown(...handlers: KeyHandler[]): Behavior {\n\tconst handler = (event: KeyboardEvent) => {\n\t\tfor (const handler of handlers) {\n\t\t\thandler(event)\n\t\t}\n\t}\n\n\treturn (node) => {\n\t\tnode.addEventListener('keydown', handler)\n\t\treturn () => node.removeEventListener('keydown', handler)\n\t}\n}\n","import type { Behavior } from './behavior'\n\nexport function onPointerMove(fn: (node: HTMLElement) => void): Behavior {\n\treturn (node) => {\n\t\tconst handler = () => fn(node)\n\n\t\tnode.addEventListener('pointermove', handler)\n\t\treturn () => node.removeEventListener('pointermove', handler)\n\t}\n}\n\nexport function onPointerOut(fn: () => void): Behavior {\n\treturn (node) => {\n\t\tconst handler = () => fn()\n\n\t\tnode.addEventListener('pointerout', handler)\n\t\treturn () => node.removeEventListener('pointerout', handler)\n\t}\n}\n\nexport function onPointerMoveChild(\n\tselector: string,\n\tfn: (node: HTMLElement | null) => void,\n): Behavior {\n\treturn (node) => {\n\t\tconst handler = (event: PointerEvent) => {\n\t\t\tif (event.target !== node) {\n\t\t\t\tconst el = (event.target as Element).closest(selector)\n\t\t\t\tfn(el as HTMLElement)\n\t\t\t}\n\t\t}\n\n\t\tnode.addEventListener('pointermove', handler)\n\t\treturn () => node.removeEventListener('pointermove', handler)\n\t}\n}\n","export const noop = () => {}\n","import type { Behavior } from './behavior'\nimport { noop } from './noop'\n\nexport const setHasPopup = (): Behavior => (node) => {\n\tnode.setAttribute('aria-haspopup', 'true')\n\treturn noop\n}\n","import type { Behavior } from './behavior'\nimport { noop } from './noop'\n\nexport const setRole =\n\t(role: string): Behavior =>\n\t(node) => {\n\t\tnode.setAttribute('role', role)\n\t\treturn noop\n\t}\n","import type { Behavior } from './behavior'\nimport { noop } from './noop'\n\n// TODO: change based on disabled\nexport const setTabIndex =\n\t(index = -1): Behavior =>\n\t(node) => {\n\t\tnode.tabIndex = index\n\t\treturn noop\n\t}\n","import type { Behavior } from './behavior'\nimport { noop } from './noop'\n\nexport const setType =\n\t(type: string): Behavior =>\n\t(node) => {\n\t\tnode.setAttribute('type', type)\n\t\treturn noop\n\t}\n","import type { Behavior } from './behavior'\nimport { derived, type Readable } from './store'\nimport type { Selectable } from './aria-selected'\nimport type { Expandable } from './aria-expanded'\n\nexport const setInputValue = (node: HTMLInputElement) => (value?: string) => {\n\tif (value) {\n\t\tnode.value = value\n\t}\n}\n\nexport const reflectSelectedValueOnClose =\n\t(store: Readable<Selectable & Expandable>, selector: (value: any) => string): Behavior =>\n\t(node) =>\n\t\tderived(store, ($store) => ($store.expanded ? null : $store.selected)).subscribe((value) =>\n\t\t\tsetInputValue(node as HTMLInputElement)(selector(value)),\n\t\t)\n","import { derived, writable } from './internal/store'\nimport { reflectAriaActivedescendent } from './internal/aria-activedescendent'\nimport { reflectAriaControls, type Controllable } from './internal/aria-controls'\nimport { reflectAriaDisabled } from './internal/aria-disabled'\nimport {\n\tdefaultExpanded,\n\treflectAriaExpanded,\n\ttype Expandable,\n\tfocusOnClose,\n} from './internal/aria-expanded'\nimport { reflectAriaLabel, type Labelable } from './internal/aria-label'\nimport {\n\tdefaultSelected,\n\treflectAriaMultiselectable,\n\treflectAriaSelected,\n\ttype Selectable,\n} from './internal/aria-selected'\nimport { applyBehaviors } from './internal/behavior'\nimport { keyEscape } from './internal/key-escape'\nimport { keyTabAllow } from './internal/key-tab'\nimport {\n\tactivate,\n\tactive,\n\tdefaultList,\n\tfirstActive,\n\tgetFocuser,\n\tgetUpdater,\n\tlastActive,\n\tnextActiveSelectable,\n\tonDestroy,\n\tselectActive,\n\tpreviousActiveSelectable,\n\tremoveItem,\n\ttype ItemOptions,\n\ttype List,\n\traiseChangeOnSelect,\n} from './internal/list'\nimport { ensureID } from './internal/new-id'\nimport { onClick } from './internal/on-click'\nimport { onClickOutside } from './internal/on-click-outside'\nimport { onInput } from './internal/on-input'\nimport { onKeydown } from './internal/on-keydown'\nimport { onPointerMoveChild } from './internal/on-pointer-move'\nimport { setHasPopup } from './internal/set-has-popup'\nimport { setRole } from './internal/set-role'\nimport { setTabIndex } from './internal/set-tab-index'\nimport { setType } from './internal/set-type'\nimport { reflectSelectedValueOnClose } from './internal/value'\nimport { tick } from 'svelte'\nimport { getPrefix } from './internal/utils'\nimport { keyEnter } from './internal/key-enter'\nimport { keyNavigation } from './internal/key-navigation'\nimport { noop } from './internal/noop'\nimport { keyBackspaceAllow } from './internal/key-backspace'\nimport { onChange } from './internal/on-change'\nimport { blockDefaultAction } from './internal/events'\n\n// TODO: add \"value\" selector, to pick text value off list item objects\nexport interface Combobox extends Labelable, Expandable, Controllable, List, Selectable {\n\tinput?: HTMLInputElement\n\tbutton?: HTMLElement\n\tfilter: string\n\tmoved: boolean // whether we have moved active or not (to reset when filtering)\n}\n\nexport function createCombobox(init?: Partial<Combobox>) {\n\t// prefix for generating unique IDs\n\tconst prefix = getPrefix('combobox')\n\n\t// internal state for component\n\tlet state: Combobox = {\n\t\t...defaultList(),\n\t\t...defaultExpanded,\n\t\t...defaultSelected,\n\t\t...init,\n\t\tfilter: '',\n\t\tmoved: false,\n\t}\n\n\tstate.multi = Array.isArray(state.selected)\n\n\t// wrap with store for reactivity\n\tconst store = writable(state)\n\n\t// update state and notify store of changes for reactivity\n\tconst set = (part: Partial<Combobox>) => store.set((state = { ...state, ...part }))\n\n\t// open the menu and set first item active\n\tconst open = () => set({ expanded: true, opened: true, active: nextActiveSelectable(state) })\n\n\t// close the menu\n\tconst close = () => set({ expanded: false, active: -1 })\n\n\t// toggle open / closed state\n\tconst toggle = () => (state.expanded ? close() : open())\n\n\t// set focused (active) item only if changed\n\tconst focus = (active: number, expand = false) => {\n\t\tif (state.active !== active) {\n\t\t\tconst expanded = state.expanded || expand\n\t\t\tconst opened = state.opened || expand\n\t\t\tset({ expanded, opened, active })\n\t\t\tconst item = state.items[active]\n\t\t\tif (item) {\n\t\t\t\titem.node.scrollIntoView({ block: 'nearest' })\n\t\t\t}\n\t\t}\n\t}\n\n\t// set focus (active) to first\n\tconst first = () => focus(firstActive(state), true)\n\n\t// set focus (active) to selected or previous\n\tconst previous = () => focus(previousActiveSelectable(state), true)\n\n\t// set focus (active) to selected or next\n\tconst next = () => focus(nextActiveSelectable(state), true)\n\n\t// set focus (active) to last\n\tconst last = () => focus(lastActive(state), true)\n\n\t// delete left on backspace if multi-select and no input\n\tconst del = () => {\n\t\tif (state.multi && state.filter === '') {\n\t\t\tconst value = state.selected[state.selected.length - 1]\n\t\t\tset({ selected: state.selected.slice(0, state.selected.length - 1) })\n\t\t\t// to support removing selected items from the list / refocusing when deleted\n\t\t\ttick().then(() => {\n\t\t\t\tconst index = state.items.findIndex((x) => x.value === value)\n\t\t\t\tfocus(index)\n\t\t\t})\n\t\t}\n\t}\n\n\tconst reset = () => {\n\t\tset({ filter: '', expanded: false })\n\t}\n\n\tconst setFocusToInput = () => state.input?.focus()\n\n\tconst setSelecttionToEnd = () => {\n\t\tif (state.input) {\n\t\t\tstate.input.selectionStart = state.input.value.length\n\t\t\tstate.input.selectionEnd = state.input.value.length\n\t\t\tstate.input.focus()\n\t\t}\n\t}\n\n\tconst filter = async (value: string) => {\n\t\t// current active item\n\t\tconst current = state.active === -1 ? state.selected : state.items[state.active].value\n\n\t\t// keep expanded or expand if filter is set\n\t\t// clear selected if input is cleared (only for single select)\n\t\tconst selected = state.multi || value ? state.selected : null\n\t\tset({ filter: value, expanded: true, opened: true, selected })\n\n\t\tawait tick()\n\n\t\t// if we moved try to keep current active, otherwise use selected, always fallback to first\n\t\t// unless there are no items matching the filter in which case nothing can be active\n\t\tconst selectedIndex = state.items.findIndex((item) => item.value === state.selected)\n\t\tconst currentIndex = state.items.findIndex((item) => item.value === current)\n\t\tconst active = state.items.length\n\t\t\t? state.moved\n\t\t\t\t? currentIndex === -1\n\t\t\t\t\t? 0\n\t\t\t\t\t: currentIndex\n\t\t\t\t: selectedIndex === -1\n\t\t\t\t\t? currentIndex === -1\n\t\t\t\t\t\t? 0\n\t\t\t\t\t\t: currentIndex\n\t\t\t\t\t: selectedIndex\n\t\t\t: -1\n\n\t\tif (state.active !== active) {\n\t\t\tset({ active })\n\t\t}\n\t}\n\n\t// set the focus based on the HTMLElement passed which will be a menuitem element or null\n\tconst focusNode = getFocuser(() => state, focus)\n\n\tconst remove = (node: HTMLElement) => set(removeItem(state, node))\n\n\tconst select = () => set(selectActive(state))\n\n\tfunction input(node: HTMLInputElement) {\n\t\tensureID(node, prefix)\n\t\tset({ input: node })\n\n\t\tconst destroy = applyBehaviors(node, [\n\t\t\tsetType('text'),\n\t\t\tsetRole('combobox'),\n\t\t\tsetTabIndex(0),\n\t\t\treflectAriaLabel(store),\n\t\t\treflectAriaExpanded(store),\n\t\t\treflectAriaControls(store),\n\t\t\treflectSelectedValueOnClose(store, (item) => item?.name),\n\t\t\tonKeydown(\n\t\t\t\tkeyEnter(select, state.multi ? noop : toggle),\n\t\t\t\tkeyEscape(close),\n\t\t\t\tkeyNavigation(first, previous, next, last),\n\t\t\t\tkeyTabAllow(select, close),\n\t\t\t\tkeyBackspaceAllow(del),\n\t\t\t),\n\t\t\tonInput(filter),\n\t\t\tonChange(blockDefaultAction),\n\t\t\t// NOTE: button might be a container of the input, or sibling of the input, depending on multi-select\n\t\t\tonClick(state.multi ? noop : toggle),\n\t\t\tfocusOnClose(store),\n\t\t\traiseChangeOnSelect(store),\n\t\t])\n\n\t\treturn {\n\t\t\tdestroy,\n\t\t}\n\t}\n\n\t// menubutton\n\tfunction button(node: HTMLElement) {\n\t\tensureID(node, prefix)\n\t\tset({ button: node })\n\n\t\tconst destroy = applyBehaviors(node, [\n\t\t\tsetType('button'),\n\t\t\tsetRole('button'),\n\t\t\tsetHasPopup(),\n\t\t\tsetTabIndex(-1),\n\t\t\treflectAriaExpanded(store),\n\t\t\treflectAriaControls(store),\n\t\t\tonClick(toggle),\n\t\t\t(node) => {\n\t\t\t\tnode.addEventListener('focus', setFocusToInput)\n\t\t\t\treturn () => node.removeEventListener('focus', setFocusToInput)\n\t\t\t},\n\t\t])\n\n\t\treturn {\n\t\t\tdestroy,\n\t\t}\n\t}\n\n\tfunction items(node: HTMLElement) {\n\t\tensureID(node, prefix)\n\t\tset({ controls: node.id })\n\n\t\tconst destroy = applyBehaviors(node, [\n\t\t\tsetRole('listbox'),\n\t\t\tsetTabIndex(-1),\n\t\t\tonClickOutside(() => (state.expanded ? [state.input, state.button, node] : null), close),\n\t\t\tonClick(\n\t\t\t\tactivate(\n\t\t\t\t\t'[role=\"option\"]',\n\t\t\t\t\tfocusNode,\n\t\t\t\t\tselect,\n\t\t\t\t\tstate.multi\n\t\t\t\t\t\t? setFocusToInput\n\t\t\t\t\t\t: () => {\n\t\t\t\t\t\t\t\tclose()\n\t\t\t\t\t\t\t\tsetSelecttionToEnd()\n\t\t\t\t\t\t\t},\n\t\t\t\t),\n\t\t\t),\n\t\t\tonPointerMoveChild('[role=\"option\"]', focusNode),\n\t\t\treflectAriaActivedescendent(store),\n\t\t\treflectAriaMultiselectable(store),\n\t\t])\n\n\t\treturn {\n\t\t\tdestroy,\n\t\t}\n\t}\n\n\t// TODO: allow \"any\" type of value, as long as a text extractor is supplied (default function is treat as a string)\n\t// NOTE: text value is required for searchability\n\tfunction item(node: HTMLElement, options?: ItemOptions) {\n\t\tensureID(node, prefix)\n\n\t\tconst update = getUpdater(node, () => state, set)\n\n\t\tupdate(options)\n\n\t\tconst value = state.items[state.items.length - 1].value\n\n\t\tconst destroy = applyBehaviors(node, [\n\t\t\tsetTabIndex(-1),\n\t\t\tsetRole('option'),\n\t\t\treflectAriaDisabled(store),\n\t\t\treflectAriaSelected(store, value),\n\t\t\tonDestroy(remove),\n\t\t])\n\n\t\treturn {\n\t\t\tupdate,\n\t\t\tdestroy,\n\t\t}\n\t}\n\n\tfunction deselect(node: HTMLElement, value: any) {\n\t\tconst destroy = applyBehaviors(node, [\n\t\t\tonClick((e) => {\n\t\t\t\tset({ selected: state.selected.filter((selected: any) => selected !== value) })\n\t\t\t\te.stopImmediatePropagation()\n\t\t\t}),\n\t\t])\n\n\t\treturn {\n\t\t\tdestroy,\n\t\t}\n\t}\n\n\t// expose a subset of our state, derive the selected value\n\tconst { subscribe } = derived(store, ($state) => {\n\t\tconst { expanded, selected, filter } = $state\n\t\treturn { expanded, selected, filter, active: active($state) }\n\t})\n\n\treturn {\n\t\tsubscribe,\n\t\tinput,\n\t\tbutton,\n\t\titems,\n\t\titem,\n\t\tdeselect,\n\t\treset,\n\t\topen,\n\t\tclose,\n\t\tset,\n\t}\n}\n","export const getPrefix = (name: string) => 'headlessui-' + name\n","import { keyHandler } from './key-handler'\nimport { Enter } from './keys'\n\nexport const keyEnter = keyHandler([Enter])\n","import { keyHandler } from './key-handler'\nimport { Home, PageUp, End, PageDown } from './keys'\n\nexport const keyHomePageUp = keyHandler([Home, PageUp])\nexport const keyEndPageDn = keyHandler([End, PageDown])\n","import { keyHandler } from './key-handler'\nimport { ArrowLeft, ArrowRight } from './keys'\n\nexport const keyLeft = keyHandler([ArrowLeft])\nexport const keyRight = keyHandler([ArrowRight])\n","import { keyHandler } from './key-handler'\nimport { ArrowUp, ArrowDown } from './keys'\n\nexport const keyUp = keyHandler([ArrowUp])\nexport const keyDown = keyHandler([ArrowDown])\n","import type { Orientation } from './aria-orientation'\nimport type { Callable } from './callable'\nimport type { KeyHandler } from './key-handler'\nimport { keyEndPageDn, keyHomePageUp } from './key-home-end'\nimport { keyLeft, keyRight } from './key-left-right'\nimport { keyDown, keyUp } from './key-up-down'\n\nexport const keyNavigation = (\n\tfirst: Callable,\n\tprevious: Callable,\n\tnext: Callable,\n\tlast: Callable,\n\torientation: Orientation = 'vertical',\n): KeyHandler => {\n\tconst handleFirst = keyHomePageUp(first)\n\tconst handlePrevious = orientation === 'vertical' ? keyUp(previous) : keyLeft(previous)\n\tconst handleNext = orientation === 'vertical' ? keyDown(next) : keyRight(next)\n\tconst handleLast = keyEndPageDn(last)\n\n\treturn (event) => {\n\t\thandleFirst(event)\n\t\thandlePrevious(event)\n\t\thandleNext(event)\n\t\thandleLast(event)\n\t}\n}\n","import { allowDefaultKeyAction, keyHandler } from './key-handler'\nimport { Backspace } from './keys'\n\nexport const keyBackspace = keyHandler([Backspace])\n\nexport const keyBackspaceAllow = keyHandler([Backspace], allowDefaultKeyAction)\n","import { listener } from './events'\n\nexport const onChange = (fn: (event: Event) => void) => (node: HTMLElement) =>\n\tlistener(node, 'change', (event) => fn(event))\n","import { derived, type Readable } from './store'\nimport { setAriaAttributeBoolean } from './aria-attribute'\nimport type { Behavior } from './behavior'\nimport type { Expandable } from './aria-expanded'\n\nexport const setAriaModal = setAriaAttributeBoolean('aria-modal')\n\nexport const reflectAriaModal =\n\t(store: Readable<Expandable>): Behavior =>\n\t(node) =>\n\t\tderived(store, ($store) => $store.expanded).subscribe(setAriaModal(node))\n","import type { Callable } from './callable'\n\nexport function cancellableClose(node: HTMLElement, close: Callable) {\n\treturn () => {\n\t\tif (node.dispatchEvent(new Event('close', { bubbles: true, cancelable: true }))) {\n\t\t\tclose()\n\t\t}\n\t}\n}\n","import { derived, writable } from './internal/store'\nimport { defaultExpanded, type Expandable } from './internal/aria-expanded'\nimport { reflectAriaModal } from './internal/aria-modal'\nimport { reflectAriaLabel, type Labelable } from './internal/aria-label'\nimport { applyBehaviors } from './internal/behavior'\nimport { keyEscape } from './internal/key-escape'\nimport { ensureID } from './internal/new-id'\nimport { onClickOutside } from './internal/on-click-outside'\nimport { onKeydown } from './internal/on-keydown'\nimport { setRole } from './internal/set-role'\nimport { getPrefix } from './internal/utils'\nimport { trapFocusOnOpen } from './internal/focus'\nimport { setTabIndex } from './internal/set-tab-index'\nimport { cancellableClose } from './internal/cancellable-close'\nimport { disablePageScroll, enablePageScroll } from '@fluejs/noscroll'\n\nexport interface Dialog extends Expandable, Labelable {}\n\nexport function createDialog(init?: Partial<Dialog>) {\n\t// prefix for generating unique IDs\n\tconst prefix = getPrefix('dialog')\n\n\tlet state: Dialog = {\n\t\t...defaultExpanded,\n\t\t...init,\n\t}\n\n\t// wrap with store for reactivity\n\tconst store = writable(state)\n\n\t// update state and notify store of changes for reactivity\n\tconst set = (part: Partial<Dialog>) => store.set((state = { ...state, ...part }))\n\n\tconst open = () => {\n\t\tset({ expanded: true, opened: true })\n\t\tdisablePageScroll()\n\t}\n\tconst close = () => {\n\t\tset({ expanded: false })\n\t\tenablePageScroll()\n\t}\n\n\t// modal\n\tfunction modal(node: HTMLElement) {\n\t\tensureID(node, prefix)\n\n\t\tconst tryClose = cancellableClose(node, close)\n\n\t\tconst destroy = applyBehaviors(node, [\n\t\t\tsetRole('dialog'),\n\t\t\tsetTabIndex(-1),\n\t\t\treflectAriaModal(store),\n\t\t\treflectAriaLabel(store),\n\t\t\ttrapFocusOnOpen(store),\n\t\t\tonClickOutside(() => (state.expanded ? [node] : null), tryClose),\n\t\t\tonKeydown(keyEscape(tryClose)),\n\t\t])\n\n\t\treturn {\n\t\t\tdestroy,\n\t\t}\n\t}\n\n\t// expose a subset of our state, derive the selected value\n\tconst { subscribe } = derived(store, ($state) => {\n\t\tconst { expanded } = $state\n\t\treturn { expanded }\n\t})\n\n\treturn {\n\t\tsubscribe,\n\t\tmodal,\n\t\topen,\n\t\tclose,\n\t\tset,\n\t}\n}\n","import { keyHandler } from './key-handler'\nimport { Space, Enter } from './keys'\n\nexport const keySpaceEnter = keyHandler([Space, Enter])\n","import { derived, writable } from './internal/store'\nimport { reflectAriaControls, type Controllable } from './internal/aria-controls'\nimport {\n\tdefaultExpanded,\n\tfocusOnClose,\n\tfocusOnExpanded,\n\treflectAriaExpanded,\n\ttype Expandable,\n} from './internal/aria-expanded'\nimport { reflectAriaLabel, type Labelable } from './internal/aria-label'\nimport { applyBehaviors } from './internal/behavior'\nimport { keyEscape } from './internal/key-escape'\nimport { keySpaceEnter } from './internal/key-space-enter'\nimport { ensureID } from './internal/new-id'\nimport { onClick } from './internal/on-click'\nimport { onKeydown } from './internal/on-keydown'\nimport { setHasPopup } from './internal/set-has-popup'\nimport { setRole } from './internal/set-role'\nimport { setTabIndex } from './internal/set-tab-index'\nimport { setType } from './internal/set-type'\nimport { getPrefix } from './internal/utils'\n\nexport interface Disclosure extends Labelable, Expandable, Controllable {\n\tbutton?: string\n\tpanel?: string\n}\n\nexport function createDisclosure(init?: Partial<Disclosure>) {\n\t// prefix for generating unique IDs\n\tconst prefix = getPrefix('disclosure')\n\n\tlet state: Disclosure = {\n\t\t...defaultExpanded,\n\t\t...init,\n\t}\n\n\t// wrap with store for reactivity\n\tconst store = writable(state)\n\n\t// update state and notify store of changes for reactivity\n\tconst set = (part: Partial<Disclosure>) => store.set((state = { ...state, ...part }))\n\n\tconst open = () => set({ expanded: true, opened: true })\n\tconst close = () => set({ expanded: false })\n\tconst toggle = () => (state.expanded ? close() : open())\n\n\t// button\n\tfunction button(node: HTMLElement) {\n\t\tensureID(node, prefix)\n\t\tset({ button: node.id })\n\n\t\tconst destroy = applyBehaviors(node, [\n\t\t\tsetType('button'),\n\t\t\tsetRole('button'),\n\t\t\tsetHasPopup(),\n\t\t\tsetTabIndex(0),\n\t\t\treflectAriaExpanded(store),\n\t\t\treflectAriaLabel(store),\n\t\t\treflectAriaControls(store),\n\t\t\tonClick(toggle),\n\t\t\tonKeydown(keyEscape(close), keySpaceEnter(toggle)),\n\t\t\tfocusOnClose(store),\n\t\t])\n\n\t\treturn {\n\t\t\tdestroy,\n\t\t}\n\t}\n\n\t// panel\n\tfunction panel(node: HTMLElement) {\n\t\tensureID(node, prefix)\n\t\tset({ panel: node.id, controls: node.id })\n\n\t\tconst destroy = applyBehaviors(node, [focusOnExpanded(store)])\n\n\t\treturn {\n\t\t\tdestroy,\n\t\t}\n\t}\n\n\t// expose a subset of our state, derive the selected value\n\tconst { subscribe } = derived(store, ($state) => {\n\t\tconst { expanded } = $state\n\t\treturn { expanded }\n\t})\n\n\treturn {\n\t\tsubscribe,\n\t\tbutton,\n\t\tpanel,\n\t\topen,\n\t\tclose,\n\t\tset,\n\t}\n}\n","// is single, printable character\nexport const isCharacter = (value: string) => /^\\S$/.test(value)\n","import type { Writable } from './store'\nimport { isCharacter } from './is-character'\nimport type { KeyHandler } from './key-handler'\nimport type { List } from './list'\n\nexport interface Searchable extends List {\n\tquery: string\n}\n\ntype SearchFn = (query: string) => void\n\nexport const keyCharacter = (fn: SearchFn): KeyHandler => {\n\tlet timeout: number\n\tlet query = ''\n\n\treturn (event) => {\n\t\tconst { key } = event\n\t\tif (isCharacter(key)) {\n\t\t\tif (timeout) {\n\t\t\t\tclearTimeout(timeout)\n\t\t\t}\n\n\t\t\tquery += key\n\t\t\tfn(query)\n\n\t\t\ttimeout = window.setTimeout(() => {\n\t\t\t\ttimeout = 0\n\t\t\t\tquery = ''\n\t\t\t}, 350)\n\t\t}\n\t}\n}\n\nexport function searchItems(store: Writable<Searchable>): SearchFn {\n\treturn (query: string) => store.update((state) => ({ ...state, query }))\n}\n","import { derived, writable } from './internal/store'\nimport { reflectAriaActivedescendent } from './internal/aria-activedescendent'\nimport { reflectAriaControls, type Controllable } from './internal/aria-controls'\nimport { reflectAriaDisabled } from './internal/aria-disabled'\nimport {\n\tdefaultExpanded,\n\tfocusOnClose,\n\tfocusOnExpanded,\n\treflectAriaExpanded,\n\ttype Expandable,\n} from './internal/aria-expanded'\nimport { reflectAriaLabel, type Labelable } from './internal/aria-label'\nimport {\n\tdefaultSelected,\n\treflectAriaMultiselectable,\n\treflectAriaSelected,\n\ttype Selectable,\n} from './internal/aria-selected'\nimport { applyBehaviors } from './internal/behavior'\nimport { keyCharacter } from './internal/key-character'\nimport { keyEscape } from './internal/key-escape'\nimport { keySpaceEnter } from './internal/key-space-enter'\nimport { keyTab } from './internal/key-tab'\nimport {\n\tactivate,\n\tactive,\n\tdefaultList,\n\tfirstActive,\n\tgetFocuser,\n\tgetSearch,\n\tgetUpdater,\n\tlastActive,\n\tnextActive,\n\tonDestroy,\n\tselectActive,\n\tpreviousActive,\n\tremoveItem,\n\ttype ItemOptions,\n\ttype List,\n\traiseChangeOnSelect,\n} from './internal/list'\nimport { ensureID } from './internal/new-id'\nimport { noop } from './internal/noop'\nimport { onClick } from './internal/on-click'\nimport { onClickOutside } from './internal/on-click-outside'\nimport { onKeydown } from './internal/on-keydown'\nimport { onPointerMoveChild } from './internal/on-pointer-move'\nimport { setHasPopup } from './internal/set-has-popup'\nimport { setRole } from './internal/set-role'\nimport { setTabIndex } from './internal/set-tab-index'\nimport { setType } from './internal/set-type'\nimport { getPrefix } from './internal/utils'\nimport { keyDown, keyUp } from './internal/key-up-down'\nimport { keyNavigation } from './internal/key-navigation'\n\n// TODO: add \"value\" selector, to pick text value off list item objects\nexport interface Listbox extends Labelable, Expandable, Controllable, List, Selectable {\n\tbutton?: HTMLElement\n}\n\nexport function createListbox(init?: Partial<Listbox>) {\n\t// prefix for generating unique IDs\n\tconst prefix = getPrefix('listbox')\n\n\t// internal state for component\n\tlet state: Listbox = {\n\t\t...defaultList(),\n\t\t...defaultExpanded,\n\t\t...defaultSelected,\n\t\t...init,\n\t}\n\n\tstate.multi = Array.isArray(state.selected)\n\n\t// wrap with store for reactivity\n\tconst store = writable(state)\n\n\t// update state and notify store of changes for reactivity\n\tconst set = (part: Partial<Listbox>) => store.set((state = { ...state, ...part }))\n\n\t// open the menu and set first item active\n\tconst open = () =>\n\t\tset({\n\t\t\texpanded: true,\n\t\t\topened: true,\n\t\t\tactive: state.items.findIndex((x) => x.value === state.selected),\n\t\t})\n\n\t// close the menu\n\tconst close = () => set({ expanded: false })\n\n\t// toggle open / closed state\n\tconst toggle = () => (state.expanded ? close() : open())\n\n\t// set focused (active) item only if changed\n\tconst focus = (active: number) => {\n\t\tif (state.active !== active) {\n\t\t\tset({ active })\n\t\t\tconst item = state.items[active]\n\t\t\tif (item) {\n\t\t\t\titem.node.scrollIntoView({ block: 'nearest' })\n\t\t\t}\n\t\t}\n\t}\n\n\t// set focus (active) to first\n\tconst first = () => focus(firstActive(state))\n\n\t// set focus (active) to previous\n\tconst previous = () => focus(previousActive(state))\n\n\t// set focus (active) to next\n\tconst next = () => focus(nextActive(state))\n\n\t// set focus (active) to last\n\tconst last = () => focus(lastActive(state))\n\n\tconst search = getSearch(() => state, focus)\n\n\t// set the focus based on the HTMLElement passed which will be a menuitem element or null\n\tconst focusNode = getFocuser(() => state, focus)\n\n\tconst remove = (node: HTMLElement) => set(removeItem(state, node))\n\n\tconst select = () => set(selectActive(state))\n\n\t// menubutton\n\tfunction button(node: HTMLElement) {\n\t\tensureID(node, prefix)\n\t\tset({ button: node })\n\n\t\tconst destroy = applyBehaviors(node, [\n\t\t\tsetType('button'),\n\t\t\tsetRole('button'),\n\t\t\tsetHasPopup(),\n\t\t\tsetTabIndex(0),\n\t\t\treflectAriaLabel(store),\n\t\t\treflectAriaExpanded(store),\n\t\t\treflectAriaControls(store),\n\t\t\tonClick(toggle),\n\t\t\tonKeydown(keySpaceEnter(toggle), keyUp(toggle), keyDown(toggle)),\n\t\t\tfocusOnClose(store),\n\t\t\traiseChangeOnSelect(store),\n\t\t])\n\n\t\treturn {\n\t\t\tdestroy,\n\t\t}\n\t}\n\n\tfunction items(node: HTMLElement) {\n\t\tensureID(node, prefix)\n\t\tset({ controls: node.id })\n\n\t\tconst destroy = applyBehaviors(node, [\n\t\t\tsetRole('listbox'),\n\t\t\tsetTabIndex(0),\n\t\t\tonClickOutside(() => (state.expanded ? [state.button, node] : null), close),\n\t\t\tonClick(activate('[role=\"option\"]', focusNode, select, state.multi ? noop : close)),\n\t\t\tonPointerMoveChild('[role=\"option\"]', focusNode),\n\t\t\tonKeydown(\n\t\t\t\tkeySpaceEnter(select, state.multi ? noop : close),\n\t\t\t\tkeyEscape(close),\n\t\t\t\tkeyNavigation(first, previous, next, last),\n\t\t\t\tkeyTab(noop),\n\t\t\t\tkeyCharacter(search),\n\t\t\t),\n\t\t\tfocusOnExpanded(store),\n\t\t\treflectAriaActivedescendent(store),\n\t\t\treflectAriaMultiselectable(store),\n\t\t])\n\n\t\treturn {\n\t\t\tdestroy,\n\t\t}\n\t}\n\n\t// TODO: allow \"any\" type of value, as long as a text extractor is supplied (default function is treat as a string)\n\t// NOTE: text value is required for searchability\n\tfunction item(node: HTMLElement, options?: ItemOptions) {\n\t\tensureID(node, prefix)\n\n\t\tconst update = getUpdater(node, () => state, set)\n\n\t\tupdate(options)\n\n\t\tconst value = state.items[state.items.length - 1].value\n\n\t\tconst destroy = applyBehaviors(node, [\n\t\t\tsetTabIndex(-1),\n\t\t\tsetRole('option'),\n\t\t\treflectAriaDisabled(store),\n\t\t\treflectAriaSelected(store, value),\n\t\t\tonDestroy(remove),\n\t\t])\n\n\t\treturn {\n\t\t\tupdate,\n\t\t\tdestroy,\n\t\t}\n\t}\n\n\tfunction deselect(node: HTMLElement, value: any) {\n\t\tconst destroy = applyBehaviors(node, [\n\t\t\tonClick((e) => {\n\t\t\t\tset({ selected: state.selected.filter((selected: any) => selected !== value) })\n\t\t\t\te.stopImmediatePropagation()\n\t\t\t}),\n\t\t])\n\n\t\treturn {\n\t\t\tdestroy,\n\t\t}\n\t}\n\n\t// expose a subset of our state, derive the selected value\n\tconst { subscribe } = derived(store, ($state) => {\n\t\tconst { expanded, selected } = $state\n\t\treturn { expanded, selected, active: active($state) }\n\t})\n\n\treturn {\n\t\tsubscribe,\n\t\tbutton,\n\t\titems,\n\t\titem,\n\t\tdeselect,\n\t\topen,\n\t\tclose,\n\t\tset,\n\t}\n}\n","import { derived, writable } from './internal/store'\nimport { reflectAriaActivedescendent } from './internal/aria-activedescendent'\nimport { reflectAriaControls, type Controllable } from './internal/aria-controls'\nimport { reflectAriaDisabled } from './internal/aria-disabled'\nimport {\n\tdefaultExpanded,\n\tfocusOnClose,\n\tfocusOnExpanded,\n\treflectAriaExpanded,\n\ttype Expandable,\n} from './internal/aria-expanded'\nimport { reflectAriaLabel, type Labelable } from './internal/aria-label'\nimport { defaultSelected, type Selectable } from './internal/aria-selected'\nimport { applyBehaviors } from './internal/behavior'\nimport { keyCharacter } from './internal/key-character'\nimport { keyEscape } from './internal/key-escape'\nimport { keySpaceEnter } from './internal/key-space-enter'\nimport { keyTab } from './internal/key-tab'\nimport {\n\tactivate,\n\tactive,\n\tdefaultList,\n\tfirstActive,\n\tgetFocuser,\n\tgetSearch,\n\tgetUpdater,\n\tlastActive,\n\tnextActive,\n\tonDestroy,\n\tselectActive,\n\tpreviousActive,\n\tremoveItem,\n\ttype ItemOptions,\n\ttype List,\n\traiseChangeOnSelect,\n} from './internal/list'\nimport { ensureID } from './internal/new-id'\nimport { noop } from './internal/noop'\nimport { onClick } from './internal/on-click'\nimport { onClickOutside } from './internal/on-click-outside'\nimport { onKeydown } from './internal/on-keydown'\nimport { onPointerMoveChild, onPointerOut } from './internal/on-pointer-move'\nimport { setHasPopup } from './internal/set-has-popup'\nimport { setRole } from './internal/set-role'\nimport { setTabIndex } from './internal/set-tab-index'\nimport { setType } from './internal/set-type'\nimport { getPrefix } from './internal/utils'\nimport { keyDown, keyUp } from './internal/key-up-down'\nimport { keyNavigation } from './internal/key-navigation'\nimport { cancellableClose } from './internal/cancellable-close'\n\n// TODO: add \"value\" selector, to pick text value off list item objects\nexport interface Menu extends Labelable, Expandable, Controllable, List, Selectable {\n\tbutton?: HTMLElement\n}\n\nexport function createMenu(init?: Partial<Menu>) {\n\t// prefix for generating unique IDs\n\tconst prefix = getPrefix('menu')\n\n\t// internal state for component\n\tlet state: Menu = {\n\t\t...defaultList(),\n\t\t...defaultExpanded,\n\t\t...defaultSelected,\n\t\t...init,\n\t}\n\n\t// wrap with store for reactivity\n\tconst store = writable(state)\n\n\t// update state and notify store of changes for reactivity\n\tconst set = (part: Partial<Menu>) => store.set((state = { ...state, ...part }))\n\n\t// open the menu and set first item active\n\tconst open = () => set({ expanded: true, opened: true })\n\n\t// close the menu\n\tconst close = () => set({ expanded: false, active: -1, selected: null })\n\n\t// toggle open / closed state\n\tconst toggle = () => (state.expanded ? close() : open())\n\n\t// set focused (active) item (open if not expanded) only if changed\n\tconst focus = (active: number, expand = false) =>\n\t\tstate.active !== active && set({ expanded: state.expanded || expand, active })\n\n\t// set focus (active) to first\n\tconst first = () => focus(firstActive(state), true)\n\n\t// set focus (active) to previous\n\tconst previous = () => focus(previousActive(state), true)\n\n\t// set focus (active) to next\n\tconst next = () => focus(nextActive(state), true)\n\n\t// set focus (active) to last\n\tconst last = () => focus(lastActive(state), true)\n\n\tconst select = () => set(selectActive(state))\n\n\t// clear focus\n\tconst none = () => focus(-1)\n\n\tconst search = getSearch(() => state, focus, true)\n\n\t// set the focus based on the HTMLElement passed which will be a menuitem element or null\n\tconst focusNode = getFocuser(() => state, focus)\n\n\tconst remove = (node: HTMLElement) => set(removeItem(state, node))\n\n\t// menubutton\n\tfunction button(node: HTMLElement) {\n\t\tensureID(node, prefix)\n\t\tset({ button: node })\n\n\t\tconst destroy = applyBehaviors(node, [\n\t\t\tsetType('button'),\n\t\t\tsetRole('button'),\n\t\t\tsetHasPopup(),\n\t\t\tsetTabIndex(0),\n\t\t\treflectAriaLabel(store),\n\t\t\treflectAriaExpanded(store),\n\t\t\treflectAriaControls(store),\n\t\t\tonClick(toggle),\n\t\t\tonKeydown(keySpaceEnter(toggle), keyUp(last), keyDown(first)),\n\t\t\tfocusOnClose(store),\n\t\t\traiseChangeOnSelect(store),\n\t\t])\n\n\t\treturn {\n\t\t\tdestroy,\n\t\t}\n\t}\n\n\tfunction items(node: HTMLElement) {\n\t\tensureID(node, prefix)\n\t\tset({ controls: node.id })\n\n\t\tconst tryClose = cancellableClose(node, close)\n\n\t\tconst destroy = applyBehaviors(node, [\n\t\t\tsetRole('menu'),\n\t\t\tsetTabIndex(0),\n\t\t\tonClickOutside(() => (state.expanded ? [state.button, node] : null), tryClose),\n\t\t\tonClick(activate('[role=\"menuitem\"]', focusNode, select, tryClose)),\n\t\t\tonPointerMoveChild('[role=\"menuitem\"]', focusNode),\n\t\t\tonPointerOut(none),\n\t\t\tonKeydown(\n\t\t\t\tkeySpaceEnter(select, tryClose),\n\t\t\t\tkeyEscape(tryClose),\n\t\t\t\tkeyNavigation(first, previous, next, last),\n\t\t\t\tkeyTab(noop),\n\t\t\t\tkeyCharacter(search),\n\t\t\t),\n\t\t\tfocusOnExpanded(store),\n\t\t\treflectAriaActivedescendent(store),\n\t\t])\n\n\t\treturn {\n\t\t\tdestroy,\n\t\t}\n\t}\n\n\t// TODO: allow \"any\" type of value, as long as a text extractor is supplied (default function is treat as a string)\n\t// NOTE: text value is required for searchability\n\tfunction item(node: HTMLElement, options?: ItemOptions) {\n\t\tensureID(node, prefix)\n\n\t\tconst update = getUpdater(node, () => state, set)\n\n\t\tupdate(options)\n\n\t\tconst destroy = applyBehaviors(node, [\n\t\t\tsetTabIndex(-1),\n\t\t\tsetRole('menuitem'),\n\t\t\treflectAriaDisabled(store),\n\t\t\tonDestroy(remove),\n\t\t])\n\n\t\treturn {\n\t\t\tupdate,\n\t\t\tdestroy,\n\t\t}\n\t}\n\n\t// expose a subset of our state, derive the selected value\n\tconst { subscribe } = derived(store, ($state) => {\n\t\tconst { expanded } = $state\n\t\treturn { expanded, active: active($state) }\n\t})\n\n\treturn {\n\t\tsubscribe,\n\t\tbutton,\n\t\titems,\n\t\titem,\n\t\topen,\n\t\tclose,\n\t\tset,\n\t}\n}\n","import { derived, writable } from './internal/store'\nimport { reflectAriaControls, type Controllable } from './internal/aria-controls'\nimport {\n\tdefaultExpanded,\n\tfocusOnClose,\n\tfocusOnExpanded,\n\treflectAriaExpanded,\n\ttype Expandable,\n} from './internal/aria-expanded'\nimport { reflectAriaLabel, type Labelable } from './internal/aria-label'\nimport { applyBehaviors } from './internal/behavior'\nimport { keyEscape } from './internal/key-escape'\nimport { keySpaceEnter } from './internal/key-space-enter'\nimport { ensureID } from './internal/new-id'\nimport { onClick } from './internal/on-click'\nimport { onClickOutside } from './internal/on-click-outside'\nimport { onKeydown } from './internal/on-keydown'\nimport { setHasPopup } from './internal/set-has-popup'\nimport { setRole } from './internal/set-role'\nimport { setTabIndex } from './internal/set-tab-index'\nimport { setType } from './internal/set-type'\nimport { getPrefix } from './internal/utils'\n\nexport interface Popover extends Labelable, Expandable, Controllable {\n\tbutton?: HTMLElement\n\tpanel?: string\n}\n\nexport function createPopover(init?: Partial<Popover>) {\n\t// prefix for generating unique IDs\n\tconst prefix = getPrefix('popover')\n\n\tlet state: Popover = {\n\t\t...defaultExpanded,\n\t\t...init,\n\t}\n\n\t// wrap with store for reactivity\n\tconst store = writable(state)\n\n\t// update state and notify store of changes for reactivity\n\tconst set = (part: Partial<Popover>) => store.set((state = { ...state, ...part }))\n\n\tconst open = () => set({ expanded: true, opened: true })\n\tconst close = () => set({ expanded: false })\n\tconst toggle = () => (state.expanded ? close() : open())\n\n\t// button\n\tfunction button(node: HTMLElement) {\n\t\tensureID(node, prefix)\n\t\tset({ button: node })\n\n\t\tconst destroy = applyBehaviors(node, [\n\t\t\tsetType('button'),\n\t\t\tsetRole('button'),\n\t\t\tsetHasPopup(),\n\t\t\tsetTabIndex(0),\n\t\t\treflectAriaExpanded(store),\n\t\t\treflectAriaLabel(store),\n\t\t\treflectAriaControls(store),\n\t\t\tonClick(toggle),\n\t\t\tonKeydown(keyEscape(close), keySpaceEnter(toggle)),\n\t\t\tfocusOnClose(store),\n\t\t])\n\n\t\treturn {\n\t\t\tdestroy,\n\t\t}\n\t}\n\n\t// panel\n\tfunction panel(node: HTMLElement) {\n\t\tensureID(node, prefix)\n\t\tset({ panel: node.id, controls: node.id })\n\n\t\tconst destroy = applyBehaviors(node, [\n\t\t\tonClickOutside(() => (state.expanded ? [state.button, node] : null), close),\n\t\t\tfocusOnExpanded(store),\n\t\t])\n\n\t\treturn {\n\t\t\tdestroy,\n\t\t}\n\t}\n\n\t// expose a subset of our state, derive the selected value\n\tconst { subscribe } = derived(store, ($state) => {\n\t\tconst { expanded } = $state\n\t\treturn { expanded }\n\t})\n\n\treturn {\n\t\tsubscribe,\n\t\tbutton,\n\t\tpanel,\n\t\topen,\n\t\tclose,\n\t\tset,\n\t}\n}\n","import type { Behavior } from './behavior'\nimport { derived, type Readable } from './store'\nimport { setAriaAttributeString } from './aria-attribute'\n\nexport type Orientation = 'horizontal' | 'vertical'\n\nexport interface Orientable {\n\torientation: Orientation\n}\n\nexport const defaultOrientation: Orientable = {\n\torientation: 'horizontal',\n}\n\nexport const setAriaOrientation = setAriaAttributeString('aria-orientation')\n\nexport const reflectAriaOrientation =\n\t(store: Readable<Orientable>): Behavior =>\n\t(node) =>\n\t\tderived(store, ($store) => $store.orientation).subscribe(setAriaOrientation(node))\n","import { derived, writable, type Readable } from './internal/store'\nimport { reflectAriaActivedescendent } from './internal/aria-activedescendent'\nimport { setAriaControls } from './internal/aria-controls'\nimport { reflectAriaLabel, type Labelable } from './internal/aria-label'\nimport { defaultSelected, reflectAriaSelected, type Selectable } from './internal/aria-selected'\nimport { applyBehaviors, type Behavior } from './internal/behavior'\nimport { keySpaceEnter } from './internal/key-space-enter'\nimport {\n\tactivate,\n\tactive,\n\tdefaultList,\n\tfirstActive,\n\tgetFocuser,\n\tlastActive,\n\tnextActive,\n\tonDestroy,\n\tselectActive,\n\tpreviousActive,\n\tremoveItem,\n\ttype List,\n\tgetUpdater,\n\ttype ItemOptions,\n\traiseChangeOnSelect,\n} from './internal/list'\nimport { ensureID } from './internal/new-id'\nimport { onClick } from './internal/on-click'\nimport { onKeydown } from './internal/on-keydown'\nimport { setRole } from './internal/set-role'\nimport { setTabIndex } from './internal/set-tab-index'\nimport { setType } from './internal/set-type'\nimport { getPrefix } from './internal/utils'\nimport { keyNavigation } from './internal/key-navigation'\nimport {\n\tdefaultOrientation,\n\treflectAriaOrientation,\n\ttype Orientable,\n} from './internal/aria-orientation'\nimport { setAriaAttributeString } from './internal/aria-attribute'\nimport { setFocus } from './internal/focus'\n\nexport interface Tabs extends Labelable, List, Selectable, Orientable {\n\ttabs: HTMLElement[]\n\tpanels: HTMLElement[]\n\tauto: boolean\n}\n\nexport function createTabs(init?: Partial<Tabs>) {\n\t// prefix for generating unique IDs\n\tconst prefixTabs = getPrefix('tabs')\n\tconst prefixTab = getPrefix('tab')\n\tconst prefixPanel = getPrefix('panel')\n\n\t// internal state for component\n\tlet state: Tabs = {\n\t\ttabs: [],\n\t\tpanels: [],\n\t\tauto: true,\n\t\t...defaultList(),\n\t\t...defaultSelected,\n\t\t...defaultOrientation,\n\t\t...init,\n\t}\n\n\t// wrap with store for reactivity\n\tconst store = writable(state)\n\n\t// update state and notify store of changes for reactivity\n\tconst set = (part: Partial<Tabs>) => store.set((state = { ...state, ...part }))\n\n\t// set focused (active) item only if changed\n\tconst focus = (active: number) => state.active !== active && set({ active })\n\n\t// set focus (active) to first\n\tconst first = () => focus(firstActive(state))\n\n\t// set focus (active) to previous\n\tconst previous = () => focus(previousActive(state))\n\n\t// set focus (active) to next\n\tconst next = () => focus(nextActive(state))\n\n\t// set focus (active) to last\n\tconst last = () => focus(lastActive(state))\n\n\tconst select = () => set(selectActive(state))\n\n\t// set the focus based on the HTMLElement passed which will be a tab element or null\n\tconst focusNode = getFocuser(() => state, focus)\n\n\tconst remove = (node: HTMLElement) => set(removeItem(state, node))\n\n\t// tablist\n\tfunction list(node: HTMLElement) {\n\t\tensureID(node, prefixTabs)\n\n\t\tconst selectOnNavigate =\n\t\t\t(store: Readable<Tabs>): Behavior =>\n\t\t\t() =>\n\t\t\t\tderived(\n\t\t\t\t\tstore,\n\t\t\t\t\t($store) =>\n\t\t\t\t\t\t$store.auto &&\n\t\t\t\t\t\t$store.active !== state.items.findIndex((item) => item.value === state.selected),\n\t\t\t\t).subscribe(select)\n\n\t\tconst destroy = applyBehaviors(node, [\n\t\t\tsetRole('tablist'),\n\t\t\treflectAriaLabel(store),\n\t\t\treflectAriaOrientation(store),\n\t\t\tsetTabIndex(-1),\n\t\t\tonClick(activate('[role=\"tab\"]', focusNode, select)),\n\t\t\t// onPointerMoveChild('[role=\"tab\"]', focusNode),\n\t\t\t// onPointerOut(none),\n\t\t\tonKeydown(\n\t\t\t\tkeySpaceEnter(select),\n\t\t\t\tkeyNavigation(first, previous, next, last, state.orientation),\n\t\t\t),\n\t\t\treflectAriaActivedescendent(store),\n\t\t\tselectOnNavigate(store),\n\t\t\traiseChangeOnSelect(store),\n\t\t])\n\n\t\treturn {\n\t\t\tdestroy,\n\t\t}\n\t}\n\n\tfunction tab(node: HTMLElement, options?: ItemOptions) {\n\t\tensureID(node, prefixTab)\n\t\tset({ tabs: [...state.tabs, node] })\n\n\t\tconst update = getUpdater(node, () => state, set)\n\n\t\tupdate(options)\n\n\t\tconst value = state.items[state.items.length - 1].value\n\t\tif (state.selected === value) {\n\t\t\tset({ active: state.tabs.length - 1 })\n\t\t}\n\n\t\tconst setTabIndex = setAriaAttributeString('tabindex')\n\t\tconst reflectAriaTabIndex =\n\t\t\t(store: Readable<Tabs>): Behavior =>\n\t\t\t(node) =>\n\t\t\t\tderived(store, ($store) => ($store.selected === value ? '0' : '-1')).subscribe(\n\t\t\t\t\tsetTabIndex(node),\n\t\t\t\t)\n\t\tconst reflectControls =\n\t\t\t(store: Readable<Tabs>): Behavior =>\n\t\t\t(node) =>\n\t\t\t\tderived(\n\t\t\t\t\tstore,\n\t\t\t\t\t($store) => $store.panels[$store.tabs.findIndex((tab) => tab === node)]?.id,\n\t\t\t\t).subscribe(setAriaControls(node))\n\t\tconst focusonChange =\n\t\t\t(store: Readable<Tabs>): Behavior =>\n\t\t\t(node) =>\n\t\t\t\tderived(store, ($store) => $store.selected === value).subscribe(setFocus(node))\n\n\t\tconst destroy = applyBehaviors(node, [\n\t\t\tsetType('button'),\n\t\t\tsetRole('tab'),\n\t\t\treflectAriaSelected(store, value),\n\t\t\treflectAriaTabIndex(store),\n\t\t\treflectControls(store),\n\t\t\tfocusonChange(store),\n\t\t])\n\n\t\treturn {\n\t\t\tdestroy,\n\t\t}\n\t}\n\n\tfunction panel(node: HTMLElement) {\n\t\tensureID(node, prefixPanel)\n\t\tset({ panels: [...state.panels, node] })\n\n\t\tconst setAriaLabelledBy = setAriaAttributeString('aria-labelledby')\n\t\tconst reflectAriaLabelledBy =\n\t\t\t(store: Readable<Tabs>): Behavior =>\n\t\t\t(node) =>\n\t\t\t\tderived(\n\t\t\t\t\tstore,\n\t\t\t\t\t($store) => $store.tabs[$store.panels.findIndex((panel) => panel === node)].id,\n\t\t\t\t).subscribe(setAriaLabelledBy(node))\n\n\t\tconst destroy = applyBehaviors(node, [\n\t\t\tsetTabIndex(0),\n\t\t\tsetRole('tabpanel'),\n\t\t\treflectAriaLabelledBy(store),\n\t\t\t// reflectAriaDisabled(store),\n\t\t\tonDestroy(remove),\n\t\t\t// set to be visible / hidden based on selected state?\n\t\t])\n\n\t\treturn {\n\t\t\t// update,\n\t\t\tdestroy,\n\t\t}\n\t}\n\n\t// expose a subset of our state, derive the selected value\n\tconst { subscribe } = derived(store, ($state) => {\n\t\tconst { selected } = $state\n\t\treturn { selected, active: active($state) }\n\t})\n\n\treturn {\n\t\tsubscribe,\n\t\tlist,\n\t\ttab,\n\t\tpanel,\n\t\tset,\n\t}\n}\n","import type { Behavior } from './behavior'\nimport { derived, type Readable } from './store'\nimport { setAriaAttributeBoolean } from './aria-attribute'\n\nexport interface Checkable {\n\tchecked: boolean\n}\n\nexport const defaultCheckable: Checkable = {\n\tchecked: false,\n}\n\nexport const setAriaChecked = setAriaAttributeBoolean('aria-checked')\n\nexport const reflectAriaChecked =\n\t(store: Readable<Checkable>): Behavior =>\n\t(node) =>\n\t\tderived(store, ($store) => $store.checked).subscribe(setAriaChecked(node))\n","import { derived, type Readable } from './store'\nimport { setAriaAttributeBoolean } from './aria-attribute'\nimport type { Behavior } from './behavior'\n\nexport interface Pressable {\n\tpressed: boolean\n}\n\nexport const defaultPressable: Pressable = {\n\tpressed: false,\n}\n\nexport const setAriaPressed = setAriaAttributeBoolean('aria-pressed')\n\nexport const reflectAriaPressed =\n\t(store: Readable<Pressable>): Behavior =>\n\t(node) =>\n\t\tderived(store, ($store) => $store.pressed).subscribe(setAriaPressed(node))\n","import { derived, writable } from './internal/store'\nimport { defaultCheckable, reflectAriaChecked, type Checkable } from './internal/aria-checked'\nimport { reflectAriaLabel, type Labelable } from './internal/aria-label'\nimport { applyBehaviors } from './internal/behavior'\nimport { keySpaceEnter } from './internal/key-space-enter'\nimport { ensureID } from './internal/new-id'\nimport { onClick } from './internal/on-click'\nimport { onKeydown } from './internal/on-keydown'\nimport { setRole } from './internal/set-role'\nimport { setTabIndex } from './internal/set-tab-index'\nimport { setType } from './internal/set-type'\nimport { getPrefix } from './internal/utils'\nimport { defaultPressable, reflectAriaPressed, type Pressable } from './internal/aria-pressed'\n\nexport interface Switch extends Labelable, Checkable, Pressable {}\n\nexport function createSwitch(init?: Partial<Switch>) {\n\t// prefix for generating unique IDs\n\tconst prefix = getPrefix('switch')\n\n\tlet state: Switch = {\n\t\t...defaultCheckable,\n\t\t...defaultPressable,\n\t\t...init,\n\t}\n\n\t// wrap with store for reactivity\n\tconst store = writable(state)\n\n\t// update state and notify store of changes for reactivity\n\tconst set = (part: Partial<Switch>) => store.set((state = { ...state, ...part }))\n\n\tconst setValue = (value: boolean) => set({ checked: value, pressed: value })\n\tconst on = () => setValue(true)\n\tconst off = () => setValue(false)\n\tconst change = () => (state.checked ? off() : on())\n\n\tfunction button(node: HTMLElement) {\n\t\tensureID(node, prefix)\n\n\t\tconst destroy = applyBehaviors(node, [\n\t\t\tsetType('button'),\n\t\t\tsetRole('button'),\n\t\t\tsetTabIndex(0),\n\t\t\treflectAriaPressed(store),\n\t\t\treflectAriaLabel(store),\n\t\t\tonClick(change),\n\t\t\tonKeydown(keySpaceEnter(change)),\n\t\t])\n\n\t\treturn {\n\t\t\tdestroy,\n\t\t}\n\t}\n\n\tfunction toggle(node: HTMLElement) {\n\t\tensureID(node, prefix)\n\n\t\tconst destroy = applyBehaviors(node, [\n\t\t\tsetType('button'),\n\t\t\tsetRole('switch'),\n\t\t\tsetTabIndex(0),\n\t\t\treflectAriaLabel(store),\n\t\t\treflectAriaChecked(store),\n\t\t\tonClick(change),\n\t\t\tonKeydown(keySpaceEnter(change)),\n\t\t])\n\n\t\treturn {\n\t\t\tdestroy,\n\t\t}\n\t}\n\n\t// expose a subset of our state, derive the selected value\n\tconst { subscribe } = derived(store, ($state) => {\n\t\tconst { checked, pressed } = $state\n\t\treturn { checked, pressed }\n\t})\n\n\treturn {\n\t\tsubscribe,\n\t\tbutton,\n\t\ttoggle,\n\t\tset,\n\t}\n}\n"],"mappings":"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","names":["derived","readable","writable","dedupe","store","previous","derived","$value","set","setAriaAttributeString","name","node","id","setAriaAttributeBoolean","value","setAriaActivedescendent","setAriaAttributeString","reflectAriaActivedescendent","store","node","derived","$store","setAriaControls","setAriaAttributeString","reflectAriaControls","store","node","derived","$store","setAriaDisabled","setAriaAttributeBoolean","reflectAriaDisabled","store","node","derived","$store","item","Space","Enter","Escape","Backspace","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Home","End","PageUp","PageDown","Tab","setFocus","node","focus","focusableSelector","onKeyDown","event","Tab","container","element","focusable","first","last","selectableSelector","isSelectableElement","trapFocusOnOpen","store","derived","$store","expanded","defaultExpanded","setAriaExpanded","setAriaAttributeBoolean","reflectAriaExpanded","store","node","derived","$store","focusOnExpanded","setFocus","focusOnClose","setAriaLabel","setAriaAttributeString","reflectAriaLabel","store","node","derived","$store","defaultSelected","setAriaSelected","setAriaAttributeBoolean","setAriaMultiselectable","reflectAriaSelected","store","value","node","derived","$store","reflectAriaMultiselectable","applyBehaviors","node","behaviors","unsubscribes","behavior","unsubscribe","listener","node","type","handler","capture","blockDefaultAction","event","allowDefaultKeyAction","_event","keyHandler","matches","action","blockDefaultAction","fns","event","fn","keyEscape","keyHandler","Escape","keyTab","keyHandler","Tab","keyTabAllow","allowDefaultKeyAction","defaultList","onDestroy","fn","node","removeItem","state","item","active","activate","selector","focus","actions","event","el","action","raiseChangeOnSelect","store","dedupe","derived","$store","selected","selectActive","value","getItemValues","options","text","firstActive","previousActive","x","previousActiveSelectable","index","nextActive","nextActiveSelectable","lastActive","findLastIndex","array","predicate","l","getUpdater","getState","setState","values","getFocuser","getSearch","prefixOnly","query","searchable","re","found","id","newID","ensureID","node","prefix","onClick","fn","node","listener","onClickOutside","getContainers","fn","initial","handler","event","containers","node","setInitial","listeners","listener","onInput","fn","node","listener","event","el","onKeydown","handlers","handler","event","node","onPointerOut","fn","node","handler","onPointerMoveChild","selector","event","el","noop","setHasPopup","node","noop","setRole","role","node","noop","setTabIndex","index","node","noop","setType","type","node","noop","setInputValue","node","value","reflectSelectedValueOnClose","store","selector","derived","$store","tick","getPrefix","name","keyEnter","keyHandler","Enter","keyHomePageUp","keyHandler","Home","PageUp","keyEndPageDn","End","PageDown","keyLeft","keyHandler","ArrowLeft","keyRight","ArrowRight","keyUp","keyHandler","ArrowUp","keyDown","ArrowDown","keyNavigation","first","previous","next","last","orientation","handleFirst","keyHomePageUp","handlePrevious","keyUp","keyLeft","handleNext","keyDown","keyRight","handleLast","keyEndPageDn","event","keyBackspace","keyHandler","Backspace","keyBackspaceAllow","allowDefaultKeyAction","onChange","fn","node","listener","event","createCombobox","init","prefix","getPrefix","state","defaultList","defaultExpanded","defaultSelected","store","writable","set","part","open","nextActiveSelectable","close","toggle","focus","active","expand","expanded","opened","item","first","firstActive","previous","previousActiveSelectable","next","last","lastActive","del","value","tick","index","x","reset","setFocusToInput","setSelecttionToEnd","filter","current","selected","selectedIndex","currentIndex","focusNode","getFocuser","remove","node","removeItem","select","selectActive","input","ensureID","applyBehaviors","setType","setRole","setTabIndex","reflectAriaLabel","reflectAriaExpanded","reflectAriaControls","reflectSelectedValueOnClose","onKeydown","keyEnter","noop","keyEscape","keyNavigation","keyTabAllow","keyBackspaceAllow","onInput","onChange","blockDefaultAction","onClick","focusOnClose","raiseChangeOnSelect","button","setHasPopup","items","onClickOutside","activate","onPointerMoveChild","reflectAriaActivedescendent","reflectAriaMultiselectable","options","update","getUpdater","destroy","reflectAriaDisabled","reflectAriaSelected","onDestroy","deselect","e","subscribe","derived","$state","setAriaModal","setAriaAttributeBoolean","reflectAriaModal","store","node","derived","$store","cancellableClose","node","close","disablePageScroll","enablePageScroll","createDialog","init","prefix","getPrefix","state","defaultExpanded","store","writable","set","part","open","close","modal","node","ensureID","tryClose","cancellableClose","applyBehaviors","setRole","setTabIndex","reflectAriaModal","reflectAriaLabel","trapFocusOnOpen","onClickOutside","onKeydown","keyEscape","subscribe","derived","$state","expanded","keySpaceEnter","keyHandler","Space","Enter","createDisclosure","init","prefix","getPrefix","state","defaultExpanded","store","writable","set","part","open","close","toggle","button","node","ensureID","applyBehaviors","setType","setRole","setHasPopup","setTabIndex","reflectAriaExpanded","reflectAriaLabel","reflectAriaControls","onClick","onKeydown","keyEscape","keySpaceEnter","focusOnClose","panel","focusOnExpanded","subscribe","derived","$state","expanded","isCharacter","value","keyCharacter","fn","timeout","query","event","key","isCharacter","createListbox","init","prefix","getPrefix","state","defaultList","defaultExpanded","defaultSelected","store","writable","set","part","open","x","close","toggle","focus","active","item","first","firstActive","previous","previousActive","next","nextActive","last","lastActive","search","getSearch","focusNode","getFocuser","remove","node","removeItem","select","selectActive","button","ensureID","applyBehaviors","setType","setRole","setHasPopup","setTabIndex","reflectAriaLabel","reflectAriaExpanded","reflectAriaControls","onClick","onKeydown","keySpaceEnter","keyUp","keyDown","focusOnClose","raiseChangeOnSelect","items","onClickOutside","activate","noop","onPointerMoveChild","keyEscape","keyNavigation","keyTab","keyCharacter","focusOnExpanded","reflectAriaActivedescendent","reflectAriaMultiselectable","options","update","getUpdater","value","destroy","reflectAriaDisabled","reflectAriaSelected","onDestroy","deselect","e","selected","subscribe","derived","$state","expanded","createMenu","init","prefix","getPrefix","state","defaultList","defaultExpanded","defaultSelected","store","writable","set","part","open","close","toggle","focus","active","expand","first","firstActive","previous","previousActive","next","nextActive","last","lastActive","select","selectActive","none","search","getSearch","focusNode","getFocuser","remove","node","removeItem","button","ensureID","applyBehaviors","setType","setRole","setHasPopup","setTabIndex","reflectAriaLabel","reflectAriaExpanded","reflectAriaControls","onClick","onKeydown","keySpaceEnter","keyUp","keyDown","focusOnClose","raiseChangeOnSelect","items","tryClose","cancellableClose","onClickOutside","activate","onPointerMoveChild","onPointerOut","keyEscape","keyNavigation","keyTab","noop","keyCharacter","focusOnExpanded","reflectAriaActivedescendent","item","options","update","getUpdater","destroy","reflectAriaDisabled","onDestroy","subscribe","derived","$state","expanded","createPopover","init","prefix","getPrefix","state","defaultExpanded","store","writable","set","part","open","close","toggle","button","node","ensureID","applyBehaviors","setType","setRole","setHasPopup","setTabIndex","reflectAriaExpanded","reflectAriaLabel","reflectAriaControls","onClick","onKeydown","keyEscape","keySpaceEnter","focusOnClose","panel","onClickOutside","focusOnExpanded","subscribe","derived","$state","expanded","defaultOrientation","setAriaOrientation","setAriaAttributeString","reflectAriaOrientation","store","node","derived","$store","createTabs","init","prefixTabs","getPrefix","prefixTab","prefixPanel","state","defaultList","defaultSelected","defaultOrientation","store","writable","set","part","focus","active","first","firstActive","previous","previousActive","next","nextActive","last","lastActive","select","selectActive","focusNode","getFocuser","remove","node","removeItem","list","ensureID","selectOnNavigate","derived","$store","item","applyBehaviors","setRole","reflectAriaLabel","reflectAriaOrientation","setTabIndex","onClick","activate","onKeydown","keySpaceEnter","keyNavigation","reflectAriaActivedescendent","raiseChangeOnSelect","tab","options","getUpdater","value","setAriaAttributeString","reflectAriaTabIndex","reflectControls","setAriaControls","focusonChange","setFocus","setType","reflectAriaSelected","panel","setAriaLabelledBy","reflectAriaLabelledBy","onDestroy","subscribe","$state","selected","defaultCheckable","setAriaChecked","setAriaAttributeBoolean","reflectAriaChecked","store","node","derived","$store","defaultPressable","setAriaPressed","setAriaAttributeBoolean","reflectAriaPressed","store","node","derived","$store","createSwitch","init","prefix","getPrefix","state","defaultCheckable","defaultPressable","store","writable","set","part","setValue","value","on","off","change","button","node","ensureID","applyBehaviors","setType","setRole","setTabIndex","reflectAriaPressed","reflectAriaLabel","onClick","onKeydown","keySpaceEnter","toggle","reflectAriaChecked","subscribe","derived","$state","checked","pressed"]}